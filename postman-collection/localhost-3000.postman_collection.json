{
	"info": {
		"_postman_id": "f8134ac7-bc0b-4916-b7e9-e4acde16a95c",
		"name": "localhost:3000",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29581507"
	},
	"item": [
		{
			"name": "Test case 1",
			"item": [
				{
					"name": "Healthcheck-Vaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"health check should pass\",function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "MyUniqueApiKey",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 2",
			"item": [
				{
					"name": "Healthcheck-Invaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"health check should fail\",function(){\r",
									"    pm.response.to .have.status(401);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "0000000000",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 3",
			"item": [
				{
					"name": "Register User-Vaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created User\",function(){\r",
									"    pm.response.to.have.status(201);\r",
									"    const {data}=pm.response.json();\r",
									"    pm.expect(data).to.have.all.keys(\"_id\",\"email\")\r",
									"    pm.expect(data.email).to.be.eql(pm.environment.get(\"user.email\"))\r",
									"    pm.environment.set(\"user1.id\",data._id)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date=Date.now();\r",
									"let email=\"aaa\"+date+\"@inn.com\"\r",
									"pm.environment.set(\"user.email\",email)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user.email}}\",\r\n  \"password\": \"nascar123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 4",
			"item": [
				{
					"name": "Register User-Invaild-Pass",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Email address already in use\",function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    const {error}=pm.response.json();\r",
									"    pm.expect(error).to.not.have.any.keys(\"_id\",\"email\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user.email}}\",\r\n  \"password\": \"nascar123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 5",
			"item": [
				{
					"name": "Register User-Invaild-Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid email\",function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"abc12876.gro.com\",\r\n  \"password\": \"nascar123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 6",
			"item": [
				{
					"name": "Login User-Vaild-Pass",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Loggged in\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"pm.test(\"Have a token\",function(){\r",
									"    const {data}=pm.response.json();\r",
									"    pm.expect(data).to.have.all.keys(\"token\")\r",
									"    pm.environment.set(\"user1.token\",data.token);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user.email}}\",\r\n  \"password\": \"nascar123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/tokens",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"tokens"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 7",
			"item": [
				{
					"name": "Login User 1-Invaild-Pass",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Either email or password is invalid\",function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Response has no token\",function(){\r",
									"    const data=pm.response.json()\r",
									"    pm.expect(data).to.not.have.any.keys(\"token\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"0000abcd@gmail.com\",\r\n  \"password\": \"nascar123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/tokens",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"tokens"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 8",
			"item": [
				{
					"name": "Login User-Invaild-Pass",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Either email or password is invalid\",function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Response has no token\",function(){\r",
									"    const data=pm.response.json()\r",
									"    pm.expect(data).to.not.have.any.keys(\"token\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"abc0000000.gro.com\",\r\n  \"password\": \"nascar123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/tokens",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"tokens"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 9",
			"item": [
				{
					"name": "Create Movie-Vaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created Movie for User1\",function(){\r",
									"    pm.response.to.have.status(201);\r",
									"    const {data}=pm.response.json();\r",
									"    pm.environment.set(\"movie1user1\",data._id);\r",
									"})\r",
									"pm.test(\"Response data have keys\",function(){\r",
									"    pm.expect(pm.response.json().data).to.have.all.keys(\"_id\",\"title\",\"year\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1.token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{user1.token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"lion\",\r\n  \"year\": 2000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 10",
			"item": [
				{
					"name": "Create Movie-Invaild-Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"body is not JSON\",function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Response data have no movie data\",function(){\r",
									"    const {data}=pm.response.json()\r",
									"    pm.expect(data).to.be.not.have.any.keys(\"_id\",\"title\",\"year\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1.token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{user1.token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"may\",\r\n  \"year\": 1982\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 11",
			"item": [
				{
					"name": "Create Movie-Invaild-Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invaild id\",function(){\r",
									"    pm.response.to.have.status(401);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"cat\",\r\n  \"year\": 2002\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teat case 12",
			"item": [
				{
					"name": "Get User All Movie List-Vaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Got list of all movies\",function(){\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"})\r",
									"pm.test(\"Response data is an array\",function(){\r",
									"    const {data}=pm.response.json();\r",
									"    pm.expect(data).to.be.an(\"array\");\r",
									"})\r",
									"pm.test(\"Response data objects have keys\",function(){\r",
									"    for(let i=0 ; i < pm.response.json().data.length ; i++) {\r",
									"        pm.expect(pm.response.json().data[i]).to.have.any.keys(\"_id\",\"title\",\"year\",\"owner\")\r",
									"        }\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1.token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{user1.token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 13",
			"item": [
				{
					"name": "Get User All Movie List-Invaild-Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invaild id\",function(){\r",
									"    pm.response.to.have.status(401);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 14",
			"item": [
				{
					"name": "Get A Specific movie-Vaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Got a specific movie\",function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"pm.test(\"Response data have movie details\",function(){\r",
									"    const {data}=pm.response.json()\r",
									"    pm.expect(data).to.be.have.all.keys(\"_id\",\"title\",\"year\",\"owner\")\r",
									"})\r",
									"pm.test(\"The user is paired with owner\",function(){\r",
									"    const {data}=pm.response.json()\r",
									"    pm.expect(data.owner).to.be.eql(pm.environment.get(\"user1.id\"))\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1.token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{user1.token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/movies/{{movie1user1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies",
								"{{movie1user1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 15",
			"item": [
				{
					"name": "Get A Specific movie-Invaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No match for specified movie id\",function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Response data not have the specified movie detail\",function(){\r",
									"    const {error}=pm.response.json()\r",
									"    pm.expect(error).to.be.not.have.any.keys(\"_id\",\"title\",\"year\",\"owner\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1.token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer{{user1.token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/movies/0000000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies",
								"0000000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 16",
			"item": [
				{
					"name": "Get A Specific movie-Invaild-Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invaild id\",function() {\r",
									"    pm.response.to.have.status(401);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/movies/{{movie1user1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies",
								"{{movie1user1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 17",
			"item": [
				{
					"name": "Delete Specific Movie-Vaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete a specific movie\",function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"pm.test(\"Response data id is the same with url\",function(){\r",
									"    const {data}=pm.response.json()\r",
									"    pm.expect(data._id).to.be.eql(pm.environment.get(\"movie1user1\"))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1.token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{user1.token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/movies/{{movie1user1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies",
								"{{movie1user1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 18",
			"item": [
				{
					"name": "Delete Specific Movie-Invaild-Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"invalid movie id\",function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1.token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{user1.token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/movies/0000000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies",
								"0000000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test case 19",
			"item": [
				{
					"name": "Delete Specific Movie-Invaild-Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invaild id\",function() {\r",
									"    pm.response.to.have.status(401);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/movies/{{movie5user1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"movies",
								"{{movie5user1}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}